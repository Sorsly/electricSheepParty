#!/usr/bin/python3.6
import os
import re
import sys
import subprocess
from json import dumps
dir_path = os.path.dirname(os.path.realpath(__file__))
proj_name = re.search(r"PROJECT_NAME := (\w+)", open("bots/Makefile", "r").read()).group(1)
ipfile = "ips.txt"

def CCCP(*args):
    os.chdir("CPU/")
    os.system("go run pathfinder.go> log.txt")
    os.chdir("plots/")
    os.system("rm *")
    os.chdir("../")
    os.system("mv log.txt plotstuff/")
    os.chdir("plotstuff/")
    os.system("python pltclass.py")
    os.system("./genplots.sh")

def getIPS(*args):
    cpuip = subprocess.check_output(["hostname", "-I"]).decode().strip('\n').strip(' ')
    rawdata = subprocess.check_output(["sudo", "nmap", "-PU", "-p0", cpuip + "/24"]).decode()

    query = r"Nmap scan report for (?P<ip>\d+\.\d+.\d+\.\d+).*?MAC Address: .*?\((?P<dev>.+?)\)"
    found = re.findall(query, rawdata, re.DOTALL)
    camIps = [ip[0] for ip in found if "Raspberry" in ip[1]]
    botIps = [ip[0] for ip in found if "Espressif" in ip[1]]

    query = r"\d+\.\d+.\d+\.\d+"
    allIps = set(re.findall(query, rawdata))
    comIps = [ip for ip in allIps if ip not in camIps and ip not in botIps]
    finalip = {}
    finalip['all'] = list(allIps)
    finalip['cpu'] = cpuip
    finalip['cam'] = camIps
    finalip['bot'] = botIps
    finalip['fes'] = comIps

    with open(ipfile, "w") as fh:
        fh.write(dumps(finalip))


def burnJTAG(*args):
    os.chdir("bots")
    os.system("make app")
    os.system("openocd -s share/openocd/scripts -f interface/jlink.cfg -f board/esp-wroom-32.cfg -c \"program_esp32 build/{}.bin 0x10000 verify exit\"".format(proj_name))


def burnUART(*args):
    os.chdir("bots/")
    os.system("make flash")


def monitorUART(*args):
    os.chdir("bots/")
    os.system("make monitor")


def launchdebug(*args):
    os.system("openocd -s share/openocd/scripts -f interface/jlink.cfg -f board/esp-wroom-32.cfg")


def debug(*args):
    os.chdir("bots/")
    os.system("xtensa-esp32-elf-gdb -x .gdbinit build/{}.elf".format(proj_name))


def main():
    available_builds = {
        "burnJTAG": burnJTAG,
        "burnUART": burnUART,
        "monitorUART": monitorUART,
        "launchdebug": launchdebug,
        "debug": debug,
        "getIP": getIPS,
        "cccp": CCCP
    }
    if len(sys.argv) == 1 or sys.argv[1] not in available_builds:
        print("Commands:")
        for key in available_builds:
            print(key)
    elif len(sys.argv) == 2:
        available_builds[sys.argv[1]]()
    elif len(sys.argv) == 3:
        available_builds[sys.argv[1]](sys.argv[2])


if __name__ == "__main__":
    main()
